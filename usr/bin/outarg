#!/bin/bash

#[of]:base
##if using bash insure extglob is on
[[ -n "$BASH_VERSION" ]] && shopt -s extglob

#[of]:test
#[of]:function isdir {
function isdir {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: isdir dirname"
    echo "Error: must have at least 1 argument"
    echo "Description: a simplified way of testing if something is a directory."
    echo "Examples:"
    echo '  "if isdir /home ; then'
    echo '    echo is a dir'
    echo '  else'
    echo '    echo is not a dir'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isdir /home ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  [ -d "$1" ] && return 0
  return 1
}
#[cf]
#[of]:function isfile {
function isfile {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: isfile filename"
    echo "Error: must have at least 1 argument"
    echo "Description: a simplified way of testing if something is a file."
    echo "Examples:"
    echo '  "if isfile /home/file ; then'
    echo '    echo is a file'
    echo '  else'
    echo '    echo is not a file'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isfile /home/file ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  [ -f "$1" ] && return 0
  return 1
}
#[cf]
#[of]:function isfilelocked {
function isfilelocked {
#[of]:  usage
  if false ; then
    echo "Usage: isfilelocked {filename}"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if {filename} is locked by a process"
    echo "Examples:"
    echo '  "if isfilelocked "testfile.txt" ; then'
    echo '    echo is locked'
    echo '  else'
    echo '    echo is unlocked'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isfilelocked "testfile.txt" ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  [[ -n $(fuser "$1" 2>/dev/null) ]]
}
#[cf]
#[of]:function isinpath {
function isinpath {
#[of]:  usage
  if false ; then
    echo "Usage: isinpath arg"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if a given prog is in the path"
    echo "Examples:"
    echo '  "if isinpath grep ; then'
    echo '    echo grep is installed'
    echo '  else'
    echo '    echo grep is missing'
    echo '  fi"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  which "$1" >/dev/null 2>&1
}
#[cf]
#[of]:function isnum {
function isnum {
#[of]:  usage
  if false ; then
    echo "Usage: isnum arg"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if arg is a number"
    echo "Examples:"
    echo '  "if isnum 50 ; then'
    echo '    echo is a number'
    echo '  else'
    echo '    echo is not a number'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isnum 50 ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  #set IFS to a sane value
  typeset IFS=' 	
'
  if [[ "$1" == ?(+|-)+([0-9]) ]] ; then
   return 0
  fi
  return 1
}
#[cf]
#[of]:function isset {
function isset {
#[of]:  usage
  if false ; then
    echo "Usage: isset var"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if a given variable is set (i.e. exist)"
    echo "Examples:"
    echo '  "if isset your_var ; then'
    echo '    echo your variable is set'
    echo '  else'
    echo '    echo your variable is not set'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isset your_var ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  eval "(( \${$1+1} ))"
}
#[cf]
#[of]:function istextfile {
function istextfile {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: istextfile filename"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if filename is a textfile"
    echo "Examples:"
    echo '  "if istextfile /home/file ; then'
    echo '    echo is a textfile'
    echo '  else'
    echo '    echo is not a textfile'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! istextfile /home/file ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  [ `file "$1" | grep -c -e script -e ascii -e text 2>/dev/null` -gt 0 ] && return 0
  return 1
}
#[cf]
#[of]:function isuser {
function isuser {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: isuser {user}"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if the current user matches user"
    echo "Examples:"
    echo '  "if isuser batch ; then'
    echo '    echo user is batch'
    echo '  else'
    echo '    echo user is not batch'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isuser batch ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  typeset _user="$1"
  [[ $(set -- $(id);a=${1#*\(};echo ${a%\)}) = "${_user}" ]]
}
#[cf]
#[cf]
#[of]:array
#[of]:function aset {
function aset {
#[of]:  usage
  if false ; then
    echo "Usage: aset var [val val val ...]"
    echo "Error: must have at least 1 args"
    echo "Description:"
    echo "  sets a given array variable"
    echo "  this exist because, there is no common way of setting an array in ksh and bash"
    echo "Examples:"
    echo "  i.e.  aset gl_BusinessDays mon tue wed thu fri"
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
}
if [[ -n "$BASH_VERSION" ]] ; then
  function aset {
    eval "
      shift
      $1=(\"\$@\")
    "
  }
else
  function aset {
    eval "
      shift
      set -A $1 -- \"\$@\"
    "
  }
fi
#[cf]
#[of]:function asort {
function asort {
#[of]:  usage
  if [[ $# -lt 2 ]] ; then
    echo "Usage: asort {-|array} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  sorts an array"
    echo "Examples:"
    echo '  i.e.  asort a "${a[@]}"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset lc_asort_tmp lc_asort_size lc_asort_index
  unset lc_asort_array
#[of]:  array bubble sort
  aset lc_asort_array "$@"
  ashift ! lc_asort_array
  lc_asort_size=${#lc_asort_array[@]}
  ((lc_asort_size-=1))
  while [[ ${lc_asort_size} -gt 0 ]] ; do
    lc_asort_index=0    
    while [[ ${lc_asort_index} -lt ${lc_asort_size} ]] ; do
      if [[ "${lc_asort_array[${lc_asort_index}]}" > "${lc_asort_array[$((lc_asort_index+1))]}" ]] ; then
        lc_asort_tmp="${lc_asort_array[$((lc_asort_index+1))]}"
        lc_asort_array[$((lc_asort_index+1))]="${lc_asort_array[${lc_asort_index}]}"
        lc_asort_array[${lc_asort_index}]="${lc_asort_tmp}"
      fi
      ((lc_asort_index+=1))
    done
    ((lc_asort_size-=1))
  done
#[cf]
  if [[ "$1" = "-" ]] ; then
    echo "${lc_asort_array[@]}"
  else
    eval "aset $1 \"\${lc_asort_array[@]}\""
  fi
  unset lc_asort_array
  return 0
}
#[cf]

#[of]:function asplit {
function asplit {
#[of]:  usage
  if [[ $# -lt 2 ]] ; then
    echo "Usage: asplit {array} {delimiter} [string]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  splits a string into an array list"
    echo "  this emulates the perl function join"
    echo "Examples:"
    echo '  i.e.  asplit b : "part1:part2:part3:part4"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset _esc
  if [[ "$1" = "-e" ]] ; then
    _esc=true
    shift
  fi
#[of]:  if [[ -z "$2" ]] ; then
  if [[ -z "$2" ]] ; then
    eval "
      shift;shift
      typeset _string=\"\$*\"
      typeset _array
      while [[ \${#_string} -gt 0 ]] ; do
        _array[\${#_array[@]}]=\"\${_string%\"\${_string#?}\"}\"
        _string=\"\${_string#?}\"
      done
      if isnum \"$1\" ; then
        echo \"\${_array[$1]}\"
      else
        aset $1 \"\${_array[@]}\"
      fi
    "
#[cf]
#[of]:  elif ${_esc\:-false} ; then
  elif ${_esc:-false} ; then
    eval "
      shift;shift
      typeset _array _char
      typeset _lit=false
      typeset _index=0
      typeset _string=\"\$*\"

      while [[ \${#_string} -gt 0 ]] ; do
        _char=\"\${_string%\"\${_string#?}\"}\"
        _string=\"\${_string#?}\"
        if [[ \"\${_char}\" = \"\\\\\" ]] ; then
          _lit=true
          continue
        elif ! \${_lit} && [[ \"\${_char}\" = \"$2\" ]] ; then
          _array[\${_index}]=\"\${_entry}\"
          unset _entry
          let \"_index+=1\"
          continue
        fi
        _lit=false
        typeset _entry=\"\${_entry}\${_char}\"
      done
      _array[\${_index}]=\"\${_entry}\"

      if isnum \"$1\" ; then
        echo \"\${_array[$1]}\"
      else
        aset $1 \"\${_array[@]}\"
      fi
    "
#[cf]
#[of]:  else
  else
    eval "
      shift;shift
      typeset IFS=\"$2\"
      typeset _string=\"\$*\"
      if isnum \"$1\" ; then
        set -- \$@
        eval \"echo \\\"\\\$\$(($1 +1))\\\" \"
      else
        if [[ \"\${_string%$2}\" = \"\$*\" ]] ; then
          aset $1 \$@
        else
          aset $1 \$@ \"\"
        fi
      fi
    "
#[cf]
  fi
}
##if first arg is a number it is a zero based position in the string
##ugh.  yet another lovely backslash forrest.
#[cf]
#[of]:function ajoin {
function ajoin {
#[of]:  usage
  if [[ $# -lt 2 ]] ; then
    echo "Usage: ajoin {var} {delimiter} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  joins a list into a single string"
    echo "  this emulates the perl function join"
    echo "Examples:"
    echo '  i.e.  ajoin a : "${a[@]}"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    shift;shift
    typeset IFS=\"$2\"
    if [[ \"$1\" = \"-\" ]] ; then
      echo \"\$*\"
    else
      $1=\"\$*\"
    fi
  "
}
#[cf]

#[of]:function apush {
function apush {
#[of]:  usage
  if [[ $# -eq 0 ]] ; then
    echo "Usage: apush {array} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  adds new element/s to the end of an array"
    echo "  this emulates the perl function unshift"
    echo "Examples:"
    echo '  i.e.  apush b "a string"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    shift
    aset $1 \"\${$1[@]}\" \"\$@\"
  "
}
#[cf]
#[of]:function apop {
function apop {
#[of]:  usage
  if [[ $# -ne 2 ]] ; then
    echo "Usage: apop {!|-|var} {array}"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  shift an array 1 element right and return that element in var"
    echo "  this emulates the perl function shift"
    echo "Examples:"
    echo '  i.e.  apop b a'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    if [[ \${#$2[@]} -gt 0 ]] ; then
      if [[ \"$1\" = \"!\" ]] ; then
        :
      elif [[ \"$1\" = \"-\" ]] ; then
        echo \"\${$2[\$((\${#$2[@]} -1))]}\"
      else
        $1=\"\${$2[\$((\${#$2[@]} -1))]}\"
      fi
      unset $2[\$((\${#$2[@]} -1))]
    else
      return 1
    fi
  "
  return 0
}
#[cf]

#[of]:function aunshift {
function aunshift {
#[of]:  usage
  if [[ $# -eq 0 ]] ; then
    echo "Usage: aunshift {array} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  adds new element/s to the beginning of an array"
    echo "  this emulates the perl function unshift"
    echo "Examples:"
    echo '  i.e.  aunshift b "a string"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    shift
    aset $1 \"\$@\" \"\${$1[@]}\"
  "
}
#[cf]
#[of]:function ashift {
function ashift {
#[of]:  usage
  if [[ $# -ne 2 ]] ; then
    echo "Usage: ashift {!|-|var} {array}"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  shift an array 1 element left and return that element in var"
    echo "  this emulates the perl function shift"
    echo "Examples:"
    echo '  i.e.  ashift b a'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    set -- \"\${$2[@]}\"
    if [[ \$# -gt 0 ]] ; then
      if [[ \"$1\" = \"!\" ]] ; then
        :
      elif [[ \"$1\" = \"-\" ]] ; then
        echo \"\$1\"
      else
        $1=\"\$1\"
      fi
      [[ \$# -gt 0 ]] && shift
      aset $2 \"\$@\"
    else
      return 1
    fi
  "
  return 0
}
#[cf]

#[of]:function awalkl {
function awalkl {
#[of]:  usage
  if [[ $# -ne 2 ]] ; then
    echo "Usage: awalkl {left array} {right array}"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  walks/moves array elements  <---  right to left"
    echo "Examples:"
    echo '  i.e.  awalkl nodes args'
    echo "Returns:"
    echo "  0 success"
    echo "  1 if right array is empty"
    exit 1
  fi
#[cf]
  ashift lc_awalkl_tmp $2 || return $?
  apush $1 "${lc_awalkl_tmp}"
  unset lc_awalkl_tmp
  return 0
}
#[cf]
#[of]:function awalkr {
function awalkr {
#[of]:  usage
  if [[ $# -ne 2 ]] ; then
    echo "Usage: awalkr {left array} {right array}"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  walks/moves array elements  --->  left to right"
    echo "Examples:"
    echo '  i.e.  awalkr args nodes'
    echo "Returns:"
    echo "  0 success"
    echo "  1 if left array is empty"
    exit 1
  fi
#[cf]
  apop lc_awalkl_tmp $1 || return $?
  aunshift $2 "${lc_awalkl_tmp}"
  unset lc_awalkl_tmp
  return 0
}
#[cf]
#[of]:function instring {
function instring {
#[of]:  usage
  if [ $# -ne 3 ] ; then
    echo 'Usage: instring {!|-|var} "{string}" {pattern}'
    echo "Error: must have at least 3 args"
    echo "Description:"
    echo "  returns the index of a pattern within a given string"
    echo "    var|stdout = the index of the match 0-n"
    echo "             if no match -1"
    echo "Examples:"
    echo "  if found _position will be set with the index of YYYY"
    echo '    _position=$(instring - "${_format}" YYYY)'
    echo '    instring _position "${_format}" YYYY'
    echo "Returns:"
    echo "  0 success"
    echo "  1 no match"
    exit 1
  fi
#[cf]
  typeset lc_instring_index lc_instring_string lc_instring_pattern lc_instring_searchlength lc_instring_result lc_instring_return
  lc_instring_string="$2"
  lc_instring_pattern="$3"
  lc_instring_searchlength=$((1 + ${#lc_instring_string} - ${#lc_instring_pattern}))
  lc_instring_index=0
  if [[ -n "${lc_instring_pattern}" ]] ; then
    while [[ ${lc_instring_index} -lt ${lc_instring_searchlength} ]] ; do
      if [[ "${lc_instring_string}" != "${lc_instring_string#@(${lc_instring_pattern})}" ]] ; then
        lc_instring_result=${lc_instring_index}
        lc_instring_return=0
        break
      fi
      lc_instring_string="${lc_instring_string#?}"
      lc_instring_index=$(( lc_instring_index + 1 ))
    done
  else
    lc_instring_result=0
    lc_instring_return=0
  fi
  if [[ "$1" = "!" ]] ; then
      :
  elif [[ "$1" = "-" ]] ; then
    echo ${lc_instring_result:--1}
  else
    eval $1=\"\${lc_instring_result:--1}\"
  fi
  return ${lc_instring_return:-1}
}
#[cf]
#[of]:function substr {
function substr {
#[of]:  usage
  if false ; then
    echo 'Usage: substr {var|-} "{string}" {index} [length]'
    echo "Error: must have at least 4 args"
    echo "Description:"
    echo "  returns, via stdout, a substring of the given string"
    echo "  the index is 0 based"
    echo "  this exist because, there is no common way of doing a substring in ksh and bash"
    echo "Examples:"
    echo "  sets _year to a 2 character substring of _var"
    echo '    _year="$(subst "${_var}" ${_position} 2)"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
}
if [[ -n "${BASH_VERSION}" ]] ; then
  ##when with bash do the bash
  function substr {
    eval typeset lc_substr_string=\"\${2:$3${4:+:}$4}\"
    if [[ "$1" = "-" ]] ; then
      echo "${lc_substr_string}"
    else
      eval $1=\"\${lc_substr_string}\"
    fi
    return 0
  }
else
  function substr {
    typeset lc_substr_string
    lc_substr_string=$(
      if [[ ${4:-1} -eq 0 ]] ; then
        echo ""
      else
        echo "$2" | cut -c $(($3+1))-${4:+$(($3+$4))}
      fi
    )
    if [[ "$1" = "-" ]] ; then
      echo "${lc_substr_string}"
    else
      eval $1=\"\${lc_substr_string}\"
    fi
    return 0
  }
fi
#[cf]
#[of]:function tolower {
function tolower {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: tolower {var|-} [string]"
    echo "Error: must have at least 1 argument"
    echo "Description: transforms a variable to lower case"
    echo "Examples:"
    echo '  tolower lc_main_filename'
    echo '  tolower - "A Test String"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset lc_tolower_data lc_tolower_result
  if [[ $# = 1 ]] ; then
    eval lc_tolower_data=\"\${$1}\"
  else
    lc_tolower_data="$2"
  fi
  if [ -n "$BASH_VERSION" ] ; then
    typeset lc_tolower_result=$(echo "${lc_tolower_data}" | tr A-Z a-z)
  else
    typeset -l lc_tolower_result="${lc_tolower_data}"
  fi
  if [[ "$1" = "-" ]] ; then
    echo "${lc_tolower_result}"
  else
    eval $1=\"\${lc_tolower_result}\"
  fi
  return 0
}
#[cf]
#[of]:function toupper {
function toupper {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: toupper {var|-} [string]"
    echo "Error: must have at least 1 argument"
    echo "Description: transforms a variable to lower case"
    echo "Examples:"
    echo '  toupper lc_main_filename'
    echo '  toupper - "A Test String"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset lc_toupper_data lc_toupper_result
  if [[ $# = 1 ]] ; then
    eval lc_toupper_data=\"\${$1}\"
  else
    lc_toupper_data="$2"
  fi
  if [ -n "$BASH_VERSION" ] ; then
    typeset lc_toupper_result=$(echo "${lc_toupper_data}" | tr a-z A-Z)
  else
    typeset -u lc_toupper_result="${lc_toupper_data}"
  fi
  if [[ "$1" = "-" ]] ; then
    echo "${lc_toupper_result}"
  else
    eval $1=\"\${lc_toupper_result}\"
  fi
  return 0
}
#[cf]
#[of]:function ascii2hex {
function ascii2hex {
#[c][var] value
  typeset lc_ascii2hex_string lc_ascii2hex_hexpart lc_ascii2hex_hex
  lc_ascii2hex_string="${2:-$1}"
  while [[ ${#lc_ascii2hex_string} -gt 0 ]] ; do
    lc_ascii2hex_hexpart=$(printf  %02X "'${lc_ascii2hex_string%"${lc_ascii2hex_string#?}"}")
    lc_ascii2hex_hex="${lc_ascii2hex_hex}${lc_ascii2hex_hexpart}"
    lc_ascii2hex_string="${lc_ascii2hex_string#?}"
  done
  if [[ $# -eq 1 ]] ; then
    echo "${lc_ascii2hex_hex}"
  else
    eval "$1=\"\${lc_ascii2hex_hex}\""
  fi
  return 0
}
#[cf]
#[of]:function cleancat {
function cleancat {
#[of]:  usage
  if [ $# -gt 1 ] ; then
    echo "Usage: cleancat [filename]|[redirect]"
    echo "Error: must have 0 or 1 argument"
    echo "Description: dumps a file or pipe removing blank lines and comments"
    echo "Examples:"
    echo '  cleancat ${lc_main_filename}'
    echo '  bigdataapp | cleancat'
    echo '  cleancat < echo "A Test String"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  if [[ -n "$1" ]] ; then
    [[ ! -r "$1" ]] && die 1 "could not read file $1"
    grep -v -e "^[[:blank:]]*$" -e "^[[:blank:]]*#" "$1" 2>/dev/null
  else
    grep -v -e "^[[:blank:]]*$" -e "^[[:blank:]]*#" 2>/dev/null
  fi
}
#[cf]
#[cf]
#[of]:string
#[of]:function instring {
function instring {
#[of]:  usage
  if [ $# -ne 3 ] ; then
    echo 'Usage: instring {!|-|var} "{string}" {pattern}'
    echo "Error: must have at least 3 args"
    echo "Description:"
    echo "  returns the index of a pattern within a given string"
    echo "    var|stdout = the index of the match 0-n"
    echo "             if no match -1"
    echo "Examples:"
    echo "  if found _position will be set with the index of YYYY"
    echo '    _position=$(instring - "${_format}" YYYY)'
    echo '    instring _position "${_format}" YYYY'
    echo "Returns:"
    echo "  0 success"
    echo "  1 no match"
    exit 1
  fi
#[cf]
  typeset lc_instring_index lc_instring_string lc_instring_pattern lc_instring_searchlength lc_instring_result lc_instring_return
  lc_instring_string="$2"
  lc_instring_pattern="$3"
  lc_instring_searchlength=$((1 + ${#lc_instring_string} - ${#lc_instring_pattern}))
  lc_instring_index=0
  if [[ -n "${lc_instring_pattern}" ]] ; then
    while [[ ${lc_instring_index} -lt ${lc_instring_searchlength} ]] ; do
      if [[ "${lc_instring_string}" != "${lc_instring_string#@(${lc_instring_pattern})}" ]] ; then
        lc_instring_result=${lc_instring_index}
        lc_instring_return=0
        break
      fi
      lc_instring_string="${lc_instring_string#?}"
      lc_instring_index=$(( lc_instring_index + 1 ))
    done
  else
    lc_instring_result=0
    lc_instring_return=0
  fi
  if [[ "$1" = "!" ]] ; then
      :
  elif [[ "$1" = "-" ]] ; then
    echo ${lc_instring_result:--1}
  else
    eval $1=\"\${lc_instring_result:--1}\"
  fi
  return ${lc_instring_return:-1}
}
#[cf]
#[of]:function substr {
function substr {
#[of]:  usage
  if false ; then
    echo 'Usage: substr {var|-} "{string}" {index} [length]'
    echo "Error: must have at least 4 args"
    echo "Description:"
    echo "  returns, via stdout, a substring of the given string"
    echo "  the index is 0 based"
    echo "  this exist because, there is no common way of doing a substring in ksh and bash"
    echo "Examples:"
    echo "  sets _year to a 2 character substring of _var"
    echo '    _year="$(subst "${_var}" ${_position} 2)"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
}
if [[ -n "${BASH_VERSION}" ]] ; then
  ##when with bash do the bash
  function substr {
    eval typeset lc_substr_string=\"\${2:$3${4:+:}$4}\"
    if [[ "$1" = "-" ]] ; then
      echo "${lc_substr_string}"
    else
      eval $1=\"\${lc_substr_string}\"
    fi
    return 0
  }
else
  function substr {
    typeset lc_substr_string
    lc_substr_string=$(
      if [[ ${4:-1} -eq 0 ]] ; then
        echo ""
      else
        echo "$2" | cut -c $(($3+1))-${4:+$(($3+$4))}
      fi
    )
    if [[ "$1" = "-" ]] ; then
      echo "${lc_substr_string}"
    else
      eval $1=\"\${lc_substr_string}\"
    fi
    return 0
  }
fi
#[cf]
#[of]:function tolower {
function tolower {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: tolower {var|-} [string]"
    echo "Error: must have at least 1 argument"
    echo "Description: transforms a variable to lower case"
    echo "Examples:"
    echo '  tolower lc_main_filename'
    echo '  tolower - "A Test String"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset lc_tolower_data lc_tolower_result
  if [[ $# = 1 ]] ; then
    eval lc_tolower_data=\"\${$1}\"
  else
    lc_tolower_data="$2"
  fi
  if [ -n "$BASH_VERSION" ] ; then
    typeset lc_tolower_result=$(echo "${lc_tolower_data}" | tr A-Z a-z)
  else
    typeset -l lc_tolower_result="${lc_tolower_data}"
  fi
  if [[ "$1" = "-" ]] ; then
    echo "${lc_tolower_result}"
  else
    eval $1=\"\${lc_tolower_result}\"
  fi
  return 0
}
#[cf]
#[of]:function toupper {
function toupper {
#[of]:  usage
  if [ -z "$1" ] ; then
    echo "Usage: toupper {var|-} [string]"
    echo "Error: must have at least 1 argument"
    echo "Description: transforms a variable to lower case"
    echo "Examples:"
    echo '  toupper lc_main_filename'
    echo '  toupper - "A Test String"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset lc_toupper_data lc_toupper_result
  if [[ $# = 1 ]] ; then
    eval lc_toupper_data=\"\${$1}\"
  else
    lc_toupper_data="$2"
  fi
  if [ -n "$BASH_VERSION" ] ; then
    typeset lc_toupper_result=$(echo "${lc_toupper_data}" | tr a-z A-Z)
  else
    typeset -u lc_toupper_result="${lc_toupper_data}"
  fi
  if [[ "$1" = "-" ]] ; then
    echo "${lc_toupper_result}"
  else
    eval $1=\"\${lc_toupper_result}\"
  fi
  return 0
}
#[cf]
#[of]:function ascii2hex {
function ascii2hex {
#[c][var] value
  typeset lc_ascii2hex_string lc_ascii2hex_hexpart lc_ascii2hex_hex
  lc_ascii2hex_string="${2:-$1}"
  while [[ ${#lc_ascii2hex_string} -gt 0 ]] ; do
    lc_ascii2hex_hexpart=$(printf  %02X "'${lc_ascii2hex_string%"${lc_ascii2hex_string#?}"}")
    lc_ascii2hex_hex="${lc_ascii2hex_hex}${lc_ascii2hex_hexpart}"
    lc_ascii2hex_string="${lc_ascii2hex_string#?}"
  done
  if [[ $# -eq 1 ]] ; then
    echo "${lc_ascii2hex_hex}"
  else
    eval "$1=\"\${lc_ascii2hex_hex}\""
  fi
  return 0
}
#[cf]
#[of]:function cleancat {
function cleancat {
#[of]:  usage
  if [ $# -gt 1 ] ; then
    echo "Usage: cleancat [filename]|[redirect]"
    echo "Error: must have 0 or 1 argument"
    echo "Description: dumps a file or pipe removing blank lines and comments"
    echo "Examples:"
    echo '  cleancat ${lc_main_filename}'
    echo '  bigdataapp | cleancat'
    echo '  cleancat < echo "A Test String"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  if [[ -n "$1" ]] ; then
    [[ ! -r "$1" ]] && die 1 "could not read file $1"
    grep -v -e "^[[:blank:]]*$" -e "^[[:blank:]]*#" "$1" 2>/dev/null
  else
    grep -v -e "^[[:blank:]]*$" -e "^[[:blank:]]*#" 2>/dev/null
  fi
}
#[cf]
#[cf]
#[cf]

#[c]1 reg 2 3 reg
#[c]
#[c]if arg is 0 output whole string
#[c]if first arg is reg do reg on whole string
#[c]
#[c][seperator|digit] [digit|reg] [digit|reg]
#[c]
#[c]outarg "" 2 "/#C/c" 4 "/#/-" 9 "##*]"
#[c]

unset gl_args gl_seperator gl_output
gl_IFS="${IFS}"
aset gl_args "$@"

if ! isnum "${gl_args[0]}" ; then
  gl_seperator="${gl_args[0]}"
else
  gl_seperator="${gl_IFS}"
fi

while ashift gl_currentArg gl_args ; do
  if isnum "${gl_currentArg}" ; then
    if [[ "${gl_currentArg}" == 0 ]] ; then
      if ! isnum "${gl_args[0]}" ; then
        eval "apush gl_output '\${i[*]${gl_args[0]}}'"
      else
        apush gl_output '${i[*]}'
      fi
    else
      ((gl_currentArg--))
      if ! isnum "${gl_args[0]}" ; then
        eval "apush gl_output '\${i[${gl_currentArg}]${gl_args[0]}}'"
      else
        apush gl_output '${i['${gl_currentArg}']}'
      fi
    fi
  fi
done

while read -ra i ; do
  IFS="${gl_seperator}"
  eval "echo \"${gl_output[*]}\""
  IFS="${gl_IFS}"
done
