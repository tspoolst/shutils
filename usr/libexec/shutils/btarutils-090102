#!/bin/bash
#ver 090102

#[of]:function decompress
function decompress () {
	for arg
	do
      if [[ ! -r "${arg}" ]] ; then
        echo "file ${arg} not found."
        exit 1
      fi

    lc_main_lcsrc="`echo ${arg} | tr A-Z a-z`"
    lc_main_ext="${lc_main_lcsrc##*.}"
    [[ -z "${lc_main_lcsrc%%*.tar.${lc_main_ext}}" ]] && lc_main_ext="tar.${lc_main_ext}"

		case "$lc_main_ext" in
      7z)
	      7za x "$arg"
	      ;;
      ace)
	      unace x "$arg"
	      ;;
      arj)
        arj x -y -2o2 "${arg}"
        ;;
      cfs|cromfs)
        unmkcromfs "${arg}"
        ;;
      dar)
        if [[ -n "${arg%%*.1.dar}" ]] ; then
          src="${arg##*/}.1.dar"
          ln -sf ${arg} ${src} || exit 1
        else
          src="${arg}"
        fi
        dar -w -v -x "${src%.1.dar}"
        [[ -L "${src}" ]] && rm -f "${src}"
        ;;
      rar)
	      rar x -ow "$arg"
	      ;;
      rpm)
#[of]:         dorpm
  if which rpm2cpio > /dev/null 2>&1 ; then
    rpm2cpio "$arg" | cpio -v --extract --preserve-modification-time --make-directories 
    if [ ! $? = 0 ]; then
      echo "... rpm2cpio failed.  (maybe $i is not an RPM?)"
    fi
  else # less reliable than rpm2cpio...
    size=( `ls -l "$arg"` )
    size=${size[4]}
    tag="`echo -e "\037\213\010"`"
    i=0
    while [[ $i -lt ${size} ]] ; do
      cval="`dd if="$arg" bs=1 skip=$i count=3 2>/dev/null`"
      if [[ "${tag}" = "${cval}" ]] ; then
        dd ibs=$i skip=1 if="$arg" 2> /dev/null | gzip -dc | cpio -v --extract --preserve-modification-time --make-directories
        exit 0
      fi
      ((i++))
    done
  fi
#[cf]
			;;
      tar)
	      tar xSvf "$arg"
	      ;;
      tar.7z)
	      7za x -so "$arg" | tar xSv
	      ;;
      tar.bz2|tbz2)
	      bzip2 -dc "$arg" | tar xSv
	      ;;
      tar.gz | tgz)
	      gzip -dc "$arg" | tar xSv
	      ;;
      tar.lzma)
	      lzma -dc "$arg" | tar xSv
	      ;;
		zip|exe)
			unzip -X "$arg"
			;;
		*)
			echo "file $arg is not an ace, bzip, gzip, rar, rpm, or zip"
			;;
		esac
	done
}
#[cf]
#[of]:function compress
function compress () {
  local dst="$1"
  shift
  local srcarray=( "$@" )

	#echo dst $dst
	#echo src $src
	#for arg in $@
	#do
  lc_main_lcdst="`echo $dst | tr A-Z a-z`"
  lc_main_ext="${lc_main_lcdst##*.}"
  [[ -z "${lc_main_lcdst%%*.tar.${lc_main_ext}}" ]] && lc_main_ext="tar.${lc_main_ext}"

  
  case "$lc_main_ext" in
  #input
  # ctar src src src src src src dst.tar.bz2
  #
  #changing src working directory is not supported yet
  #
  #dst is final destination file compression determined by extention
  #src is a composit of sources with possible change directories "-C" included
  #max compression is always assumed
  #this should be built up like a regular copy command if possible
  7z)
	  #compression -6 is default, -9 is max
	  [ -e $dst ] && rm -f $dst
	  7za a -mx=9 $dst "${srcarray[@]}"
	  ;;
  ace)
	  echo sorry ace compression is not yet supported
	  #no known free compressor
	  #unace x $dst $src
	  ;;
  arj)
    #adding empty dirs is broke
    #saving ownership and permissions of base dirs is broke
    [ -e $dst ] && rm -f $dst
    arj a "${dst}" -jm -r -2o2 -a1 "${srcarray[@]}"
    ;;
  cfs|cromfs)
  set -xv
    if [[ ! -d "${srcarray[0]}" ]] ; then
      echo "cromfs need a directory as input"
      exit 1
    fi
    mkcromfs "${srcarray[0]}" ${dst}
    ;;
  dar)
    #dst="${dst%.1.dar}"
    #dst="${dst%.dar}"
    i=0
    while [[ $i -lt ${#srcarray[@]} ]] ; do
      srcarray[$i]="-g \"${srcarray[$i]}\""
      ((i++))
    done
    eval dar -w -v -y9 -R $PWD "${srcarray[@]}" -c - > "$dst"
    ;;
  rar)
	  #compression -m3 is default, -m5 is max
	  #-mc<par> advanced compression parameters - needs research
	  #
	  #-w changes the src working directory
	  #
	  #-ow retain uid/gid - top level uid/gid is not stored
	  #-ol retain links - links do not store uid/gid
	  [ -e $dst ] && rm -f $dst
	  rar a -m5 -r -ol -ow $dst "${srcarray[@]}"
	  ;;
  tar)
	  #-C changes the src working directory
	  tar cvSf $dst "${srcarray[@]}"
	  ;;
  tar.7z)
	  #compression -6 is default, -9 is max
	  #-C changes the src working directory
	  [ -e $dst ] && rm -f $dst
	  tar cvS "${srcarray[@]}" | 7za a -mx=9 -si $dst
	  ;;
  tar.bz2)
	  #compression -9 is max and default
	  #-C changes the src working directory
	  tar cvS "${srcarray[@]}" | bzip2 -9 > $dst
	  ;;
  tar.gz | tgz)
	  #compression -6 is default, -9 is max
	  #-C changes the src working directory
	  tar cvS "${srcarray[@]}" | gzip -9 > $dst
	  ;;
  tar.lzma)
	  tar cvS "${srcarray[@]}" | lzma -z9c > "$dst"
	  ;;
  zip)
	      #compression -6 is default, -9 is max
	  #-y retain links
	  zip -ry9 - "${srcarray[@]}" > $dst
	  ;;
  *)
	  echo "file $dst is not a bzip, gzip, zip, or rar"
	  ;;
  esac
  #done
}
#[cf]
#[of]:function conversion
function conversion () {
	#need an option to remove the original archive, but should only do this after
	#compairing the two, again the comparision should be the default and an option
	#convert using pipes or even named pipes if we have to
	#it should be possible to give this function an entire directory chain for
	#conversion or even better if we would take an entire directory of files
	#compressed with different methods and convert them to one common package
	#format
	#
	#
	#
	#rpm to etc
	#tar.bz2 to .zip or tar.gz or rar  etc
	echo
	zip -ry9 - $src > $dst
}
#[cf]

#we need command line checking before we call other functions
#confermations would be nice before we destroy existing archives
#a generic help system needs to be made
if [ "${0##*/}" == "utar" ] ; then
	decompress "$@"
elif [ "${0##*/}" == "ctar" ] ; then
	compress "$@"
else
	echo "this program must be ran as a link named ctar or utar"
fi
