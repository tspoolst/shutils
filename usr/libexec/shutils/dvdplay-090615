#!/bin/bash

#[c]if no en tracks found, the first one should be used
#[c]the largest first track should be played
#[c]  a disk with only small tracks should be handle differently
#[c]
#[c]the default dvd drive needs to be resolved
#[c]  might not be /dev/dvd
#[c]

#[of]:functions
#[of]:base
#[of]:function die {
function die {
  typeset _return
  _return=$1
  shift
  echo "$@" >&2
  exit ${_return}
}
#[cf]
#[of]:test
##if using bash insure extglob is on
[[ -n "$BASH_VERSION" ]] && shopt -s extglob

#[of]:function isdir {
function isdir {
  if [ -z "$1" ] ; then
    echo "Usage: isdir dirname"
    echo "Error: must have at least 1 argument"
    echo "Description: a simplified way of testing if something is a directory."
    echo "Examples:"
    echo '  "if isdir /home ; then'
    echo '    echo is a dir'
    echo '  else'
    echo '    echo is not a dir'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isdir /home ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
  [ -d "$1" ] && return 0
  return 1
}
#[cf]
#[of]:function isfile {
function isfile {
  if [ -z "$1" ] ; then
    echo "Usage: isfile filename"
    echo "Error: must have at least 1 argument"
    echo "Description: a simplified way of testing if something is a file."
    echo "Examples:"
    echo '  "if isfile /home/file ; then'
    echo '    echo is a file'
    echo '  else'
    echo '    echo is not a file'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isfile /home/file ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
  [ -f "$1" ] && return 0
  return 1
}
#[cf]
#[of]:function isnum {
function isnum {
#[of]:  usage
  if false ; then
    echo "Usage: isnum arg"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if arg is a number"
    echo "Examples:"
    echo '  "if isnum 50 ; then'
    echo '    echo is a number'
    echo '  else'
    echo '    echo is not a number'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isnum 50 ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
}
  function isnum {
    #set IFS to a sane value
    typeset IFS=' 	
'
    if [[ "$1" == ?(+|-)+([0-9]) ]] ; then
     return 0
    fi
    return 1
  }
#[cf]
#[of]:function isset {
function isset {
#[of]:  usage
  if false ; then
    echo "Usage: isset var"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if a given variable is set (i.e. exist)"
    echo "Examples:"
    echo '  "if isset your_var ; then'
    echo '    echo your variable is set'
    echo '  else'
    echo '    echo your variable is not set'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! isset your_var ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
}
  function isset {
    eval "[[ \${#$1[@]} -eq 0 ]]" && return 1
    return 0
  }
#[cf]
#[of]:function istextfile {
function istextfile {
#[of]:usage
  if [ -z "$1" ] ; then
    echo "Usage: istextfile filename"
    echo "Error: must have at least 1 argument"
    echo "Description: checks if filename is a textfile"
    echo "Examples:"
    echo '  "if istextfile /home/file ; then'
    echo '    echo is a textfile'
    echo '  else'
    echo '    echo is not a textfile'
    echo '  fi"'
    echo '  statement may also be negated'
    echo '    "if ! istextfile /home/file ; then"'
    echo "Returns:"
    echo "  0 true"
    echo "  1 false"
    exit 1
  fi
#[cf]
  [ `file "$1" | grep -c -e script -e ascii -e text 2>/dev/null` -gt 0 ] && return 0
  return 1
}
#[cf]

#[cf]
#[of]:array
##a colloction of array handling tools
#[of]:function aset {
function aset {
#[of]:  usage
  if false ; then
    echo "Usage: aset var [val val val ...]"
    echo "Error: must have at least 1 args"
    echo "Description:"
    echo "  sets a given array variable"
    echo "  this exist because, there is no common way of setting an array in ksh and bash"
    echo "Examples:"
    echo "  i.e.  aset gl_BusinessDays mon tue wed thu fri"
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
}
if [[ -n "$BASH_VERSION" ]] ; then
  function aset {
    eval "
      shift
      $1=(\"\$@\")
    "
  }
else
  function aset {
    eval "
      shift
      set -A $1 -- \"\$@\"
    "
  }
fi
#[cf]
#[of]:function asort {
function asort {
#[of]:  usage
  if [[ $# -lt 2 ]] ; then
    echo "Usage: asort {-|array} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  sorts an array"
    echo "Examples:"
    echo '  i.e.  asort a "${a[@]}"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset _array _tmp _size _index _nocase
  if [[ "$1" = "-n" ]] ; then
    _nocase=true
    shift
  fi
  aset _array "$@"
  ashift ! _array
  _size=${#_array[@]}
  ((_size-=1))
  while [[ ${_size} -gt 0 ]] ; do
    _index=0    
    while [[ ${_index} -lt ${_size} ]] ; do
      if [[ "${_array[${_index}]}" > "${_array[$((_index+1))]}" ]] ; then
        _tmp="${_array[$((_index+1))]}"
        _array[$((_index+1))]="${_array[${_index}]}"
        _array[${_index}]="${_tmp}"
      fi
      ((_index+=1))
    done
    ((_size-=1))
  done
  if [[ "$1" = "-" ]] ; then
    echo "${_array[@]}"
  else
    eval "aset $1 \"\${_array[@]}\""
  fi
  return 0
}
#[cf]

#[of]:function asplit {
function asplit {
#[of]:  usage
  if [[ $# -lt 2 ]] ; then
    echo "Usage: asplit {array} {delimiter} [string]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  splits a string into an array list"
    echo "  this emulates the perl function join"
    echo "Examples:"
    echo '  i.e.  asplit b : "part1:part2:part3:part4"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  typeset _esc
  if [[ "$1" = "-e" ]] ; then
    _esc=true
    shift
  fi
#[of]:  if [[ -z "$2" ]] ; then
  if [[ -z "$2" ]] ; then
    eval "
      shift;shift
      typeset _string=\"\$*\"
      while [[ \${#_string} -gt 0 ]] ; do
        typeset _array[\${#_array[@]}]=\"\${_string%\"\${_string#?}\"}\"
        _string=\"\${_string#?}\"
      done
      if isnum \"$1\" ; then
        echo \"\${_array[$1]}\"
      else
        aset $1 \"\${_array[@]}\"
      fi
    "
#[cf]
#[of]:  elif ${_esc\:-false} ; then
  elif ${_esc:-false} ; then
    eval "
      shift;shift
      typeset _array _char
      typeset _lit=false
      typeset _index=0
      typeset _string=\"\$*\"

      while [[ \${#_string} -gt 0 ]] ; do
        _char=\"\${_string%\"\${_string#?}\"}\"
        _string=\"\${_string#?}\"
        if [[ \"\${_char}\" = \"\\\\\" ]] ; then
          _lit=true
          continue
        elif ! \${_lit} && [[ \"\${_char}\" = \"$2\" ]] ; then
          _array[\${_index}]=\"\${_entry}\"
          unset _entry
          let \"_index++\"
          continue
        fi
        _lit=false
        typeset _entry=\"\${_entry}\${_char}\"
      done
      _array[\${_index}]=\"\${_entry}\"

      if isnum \"$1\" ; then
        echo \"\${_array[$1]}\"
      else
        aset $1 \"\${_array[@]}\"
      fi
    "
#[cf]
#[of]:  else
  else
    eval "
      shift;shift
      typeset IFS=\"$2\"
      if isnum \"$1\" ; then
        set -- \$@
        eval \"echo \\\"\\\$\$(($1 +1))\\\" \"
      else
        if [[ \"\${*%$2}\" = \"\$*\" ]] ; then
          aset $1 \$@
        else
          aset $1 \$@ \"\"
        fi
      fi
    "
#[cf]
  fi
}
##if first arg is a number it is a zero based position in the string
##ugh.  yet another lovely backslash forrest.
#[cf]
#[of]:function ajoin {
function ajoin {
#[of]:  usage
  if [[ $# -lt 2 ]] ; then
    echo "Usage: ajoin {var} {delimiter} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  joins a list into a single string"
    echo "  this emulates the perl function join"
    echo "Examples:"
    echo '  i.e.  ajoin a : "${a[@]}"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    shift;shift
    typeset IFS=\"$2\"
    if [[ \"$1\" = \"-\" ]] ; then
      echo \"\$*\"
    else
      $1=\"\$*\"
    fi
  "
}
#[cf]

#[of]:function apush {
function apush {
#[of]:  usage
  if [[ $# -eq 0 ]] ; then
    echo "Usage: apush {array} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  adds new element/s to the end of an array"
    echo "  this emulates the perl function unshift"
    echo "Examples:"
    echo '  i.e.  apush b "a string"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    shift
    aset $1 \"\${$1[@]}\" \"\$@\"
  "
}
#[cf]
#[of]:function apop {
function apop {
#[of]:  usage
  if [[ $# -ne 2 ]] ; then
    echo "Usage: apop {!|-|var} {array}"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  shift an array 1 element right and return that element in var"
    echo "  this emulates the perl function shift"
    echo "Examples:"
    echo '  i.e.  apop b a'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    if [[ \${#$2[@]} -gt 0 ]] ; then
      if [[ \"$1\" = \"!\" ]] ; then
        :
      elif [[ \"$1\" = \"-\" ]] ; then
        echo \"\${$2[\$((\${#$2[@]} -1))]}\"
      else
        $1=\"\${$2[\$((\${#$2[@]} -1))]}\"
      fi
      unset $2[\$((\${#$2[@]} -1))]
    else
      return 1
    fi
  "
  return 0
}
#[cf]

#[of]:function aunshift {
function aunshift {
#[of]:  usage
  if [[ $# -eq 0 ]] ; then
    echo "Usage: aunshift {array} [val val val ...]"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  adds new element/s to the beginning of an array"
    echo "  this emulates the perl function unshift"
    echo "Examples:"
    echo '  i.e.  aunshift b "a string"'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    shift
    aset $1 \"\$@\" \"\${$1[@]}\"
  "
}
#[cf]
#[of]:function ashift {
function ashift {
#[of]:  usage
  if [[ $# -ne 2 ]] ; then
    echo "Usage: ashift {!|-|var} {array}"
    echo "Error: must have at least 2 args"
    echo "Description:"
    echo "  shift an array 1 element left and return that element in var"
    echo "  this emulates the perl function shift"
    echo "Examples:"
    echo '  i.e.  ashift b a'
    echo "Returns:"
    echo "  0 success"
    exit 1
  fi
#[cf]
  eval "
    set -- \"\${$2[@]}\"
    if [[ \$# -gt 0 ]] ; then
      if [[ \"$1\" = \"!\" ]] ; then
        :
      elif [[ \"$1\" = \"-\" ]] ; then
        echo \"\$1\"
      else
        $1=\"\$1\"
      fi
      [[ \$# -gt 0 ]] && shift
      aset $2 \"\$@\"
    else
      return 1
    fi
  "
  return 0
}
#[cf]
#[cf]
#[cf]
#[of]:function unejectdvd {
function unejectdvd {
  touch ${gl_configfqpath}/dvdplay.menu
  eject -t /dev/dvd
}
#[cf]
#[of]:function getdvdinfo {
function getdvdinfo {
#[c]  ID_DVD_TITLE_1_LENGTH=5735.667
#[c]  ID_DVD_TITLE_2_LENGTH=44.000
#[c]  ID_DVD_DISC_ID=CEA78CB96ADD4B05C7C15167691B6A99
  typeset _line _length _title _messagewindow
#[c]  xmessage -timeout 5 -center "reading dvd info
#[c]please wait..."
  _messagewindow=$!
  while read _line ; do
    if [[ -z "${_line##ID_DVD_TITLE_*}" ]] ; then
      asplit _length _ "${_line}"
      _length="${_length[4]#*=}"
      _title="${_length[3]}"
      gl_titles[${_title}]="${_length%%.*}"
    fi
    if [[ -z "${_line##ID_DVD_DISC_ID=*}" ]]; then
      gl_id="${_line##*=}"
      break
    fi
  done < <(mplayer dvd://1 -identify -frames 0 2>/dev/null | grep = | grep _)
#[c]  ps "${_messagewindow}" >/dev/null 2>&1 && kill ${_messagewindow}
}
#[cf]
#[of]:function playdvdtitle {
function playdvdtitle {
  typeset _title _line _aid _lang
  _title="$1"
  while read _line ; do
    if [[ -z "${_line##ID_AID_*}" ]] ; then
      asplit _aid _ "${_line}"
      _aid="${_aid[2]}"
      _lang="${_aid[3]#*=}"
      [[ "${_lang}" = "en" ]] && break
    fi
    if [[ -z "${_line##ID_VIDEO_ID=*}" ]]; then
      echo "no english tracks found"
      exit 1
    fi
  done < <(mplayer dvd://${_title:-1} -identify -frames 0 2>/dev/null | grep = | grep _)
  mplayer -stop-xscreensaver -really-quiet -vo xv -framedrop -vf pullup -aid ${_aid} -af volnorm,volume=10 dvd://${_title:-1}
}
#[cf]
#[cf]
#[of]:main
unset gl_titles
gl_configfqpath="${ICEWM_PRIVCFG:-${HOME}/.icewm}"
lc_main_task="$1"

case "${lc_main_task}" in
  settings)
    ;;
  prompt)
    unejectdvd
    getdvdinfo
    if ! isset gl_titles ; then
      sleep 10
      getdvdinfo
    fi
    echo 'prog "eject dvd" app eject /dev/dvd'
    echo 'prog "play all" app dvdplay'
    for _title in ${!gl_titles[@]} ; do
      echo "prog \"title ${_title} ${gl_titles[${_title}]}\" app dvdplay ${_title}"
    done
    ;;
  *)
    [[ -n "${lc_main_task}" ]] && ! isnum "${lc_main_task}" && \
      die 1 "usage: dvdplay [{title #}|prompt|settings]"
    unejectdvd
    playdvdtitle ${lc_main_task}
    ;;
esac
exit

#[of]:find first large title and aid
#[c]ID_AUDIO_ID=128
#[c]ID_AID_128_LANG=en

#set -xv
_play=false
for _title in ${!_titles[@]} ; do
  if [[ ${_titles[${_title}]} -gt 0 ]] ; then
    break
  fi
done
#[cf]
exit
#[c]mplayer dvd://1 -aid 128 -vop detc -vo xv -framedrop
#[c]mplayer dvd://1 -alang us -vf lavcdeint -vo xvidix -framedrop

#[cf]
